# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_domino_nurbs', [dirname(__file__)])
        except ImportError:
            import _domino_nurbs
            return _domino_nurbs
        if fp is not None:
            try:
                _mod = imp.load_module('_domino_nurbs', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _domino_nurbs = swig_import_helper()
    del swig_import_helper
else:
    import _domino_nurbs
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_domino_nurbs.DOMINO_NURBS_LABEL_LEN_swigconstant(_domino_nurbs)
DOMINO_NURBS_LABEL_LEN = _domino_nurbs.DOMINO_NURBS_LABEL_LEN
class _NurbsVector3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _NurbsVector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _NurbsVector3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _domino_nurbs._NurbsVector3_x_set
    __swig_getmethods__["x"] = _domino_nurbs._NurbsVector3_x_get
    if _newclass:
        x = _swig_property(_domino_nurbs._NurbsVector3_x_get, _domino_nurbs._NurbsVector3_x_set)
    __swig_setmethods__["y"] = _domino_nurbs._NurbsVector3_y_set
    __swig_getmethods__["y"] = _domino_nurbs._NurbsVector3_y_get
    if _newclass:
        y = _swig_property(_domino_nurbs._NurbsVector3_y_get, _domino_nurbs._NurbsVector3_y_set)
    __swig_setmethods__["z"] = _domino_nurbs._NurbsVector3_z_set
    __swig_getmethods__["z"] = _domino_nurbs._NurbsVector3_z_get
    if _newclass:
        z = _swig_property(_domino_nurbs._NurbsVector3_z_get, _domino_nurbs._NurbsVector3_z_set)

    def __getitem__(self, i):
        return _domino_nurbs._NurbsVector3___getitem__(self, i)

    def __setitem__(self, i, v):
        return _domino_nurbs._NurbsVector3___setitem__(self, i, v)

    def __init__(self):
        this = _domino_nurbs.new__NurbsVector3()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _domino_nurbs.delete__NurbsVector3
    __del__ = lambda self: None
_NurbsVector3_swigregister = _domino_nurbs._NurbsVector3_swigregister
_NurbsVector3_swigregister(_NurbsVector3)

class _NurbsVector4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _NurbsVector4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _NurbsVector4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _domino_nurbs._NurbsVector4_x_set
    __swig_getmethods__["x"] = _domino_nurbs._NurbsVector4_x_get
    if _newclass:
        x = _swig_property(_domino_nurbs._NurbsVector4_x_get, _domino_nurbs._NurbsVector4_x_set)
    __swig_setmethods__["y"] = _domino_nurbs._NurbsVector4_y_set
    __swig_getmethods__["y"] = _domino_nurbs._NurbsVector4_y_get
    if _newclass:
        y = _swig_property(_domino_nurbs._NurbsVector4_y_get, _domino_nurbs._NurbsVector4_y_set)
    __swig_setmethods__["z"] = _domino_nurbs._NurbsVector4_z_set
    __swig_getmethods__["z"] = _domino_nurbs._NurbsVector4_z_get
    if _newclass:
        z = _swig_property(_domino_nurbs._NurbsVector4_z_get, _domino_nurbs._NurbsVector4_z_set)
    __swig_setmethods__["w"] = _domino_nurbs._NurbsVector4_w_set
    __swig_getmethods__["w"] = _domino_nurbs._NurbsVector4_w_get
    if _newclass:
        w = _swig_property(_domino_nurbs._NurbsVector4_w_get, _domino_nurbs._NurbsVector4_w_set)

    def __getitem__(self, i):
        return _domino_nurbs._NurbsVector4___getitem__(self, i)

    def __setitem__(self, i, v):
        return _domino_nurbs._NurbsVector4___setitem__(self, i, v)

    def __init__(self):
        this = _domino_nurbs.new__NurbsVector4()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _domino_nurbs.delete__NurbsVector4
    __del__ = lambda self: None
_NurbsVector4_swigregister = _domino_nurbs._NurbsVector4_swigregister
_NurbsVector4_swigregister(_NurbsVector4)


_domino_nurbs.NURBS_ERROR_VALUE_swigconstant(_domino_nurbs)
NURBS_ERROR_VALUE = _domino_nurbs.NURBS_ERROR_VALUE
class NurbsCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NurbsCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NurbsCurve, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _domino_nurbs.NurbsCurve_id_set
    __swig_getmethods__["id"] = _domino_nurbs.NurbsCurve_id_get
    if _newclass:
        id = _swig_property(_domino_nurbs.NurbsCurve_id_get, _domino_nurbs.NurbsCurve_id_set)
    __swig_setmethods__["degree"] = _domino_nurbs.NurbsCurve_degree_set
    __swig_getmethods__["degree"] = _domino_nurbs.NurbsCurve_degree_get
    if _newclass:
        degree = _swig_property(_domino_nurbs.NurbsCurve_degree_get, _domino_nurbs.NurbsCurve_degree_set)
    __swig_setmethods__["cp_length"] = _domino_nurbs.NurbsCurve_cp_length_set
    __swig_getmethods__["cp_length"] = _domino_nurbs.NurbsCurve_cp_length_get
    if _newclass:
        cp_length = _swig_property(_domino_nurbs.NurbsCurve_cp_length_get, _domino_nurbs.NurbsCurve_cp_length_set)
    __swig_setmethods__["cp"] = _domino_nurbs.NurbsCurve_cp_set
    __swig_getmethods__["cp"] = _domino_nurbs.NurbsCurve_cp_get
    if _newclass:
        cp = _swig_property(_domino_nurbs.NurbsCurve_cp_get, _domino_nurbs.NurbsCurve_cp_set)
    __swig_setmethods__["knot"] = _domino_nurbs.NurbsCurve_knot_set
    __swig_getmethods__["knot"] = _domino_nurbs.NurbsCurve_knot_get
    if _newclass:
        knot = _swig_property(_domino_nurbs.NurbsCurve_knot_get, _domino_nurbs.NurbsCurve_knot_set)
    __swig_setmethods__["knot_length"] = _domino_nurbs.NurbsCurve_knot_length_set
    __swig_getmethods__["knot_length"] = _domino_nurbs.NurbsCurve_knot_length_get
    if _newclass:
        knot_length = _swig_property(_domino_nurbs.NurbsCurve_knot_length_get, _domino_nurbs.NurbsCurve_knot_length_set)
    __swig_setmethods__["basis"] = _domino_nurbs.NurbsCurve_basis_set
    __swig_getmethods__["basis"] = _domino_nurbs.NurbsCurve_basis_get
    if _newclass:
        basis = _swig_property(_domino_nurbs.NurbsCurve_basis_get, _domino_nurbs.NurbsCurve_basis_set)
    __swig_setmethods__["d_basis"] = _domino_nurbs.NurbsCurve_d_basis_set
    __swig_getmethods__["d_basis"] = _domino_nurbs.NurbsCurve_d_basis_get
    if _newclass:
        d_basis = _swig_property(_domino_nurbs.NurbsCurve_d_basis_get, _domino_nurbs.NurbsCurve_d_basis_set)
    __swig_setmethods__["label"] = _domino_nurbs.NurbsCurve_label_set
    __swig_getmethods__["label"] = _domino_nurbs.NurbsCurve_label_get
    if _newclass:
        label = _swig_property(_domino_nurbs.NurbsCurve_label_get, _domino_nurbs.NurbsCurve_label_set)
    __swig_setmethods__["next"] = _domino_nurbs.NurbsCurve_next_set
    __swig_getmethods__["next"] = _domino_nurbs.NurbsCurve_next_get
    if _newclass:
        next = _swig_property(_domino_nurbs.NurbsCurve_next_get, _domino_nurbs.NurbsCurve_next_set)

    def __getitem__(self, i):
        return _domino_nurbs.NurbsCurve___getitem__(self, i)

    def __init__(self):
        this = _domino_nurbs.new_NurbsCurve()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _domino_nurbs.delete_NurbsCurve
    __del__ = lambda self: None
NurbsCurve_swigregister = _domino_nurbs.NurbsCurve_swigregister
NurbsCurve_swigregister(NurbsCurve)

class NurbsSurface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NurbsSurface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NurbsSurface, name)
    __repr__ = _swig_repr
    __swig_setmethods__["label"] = _domino_nurbs.NurbsSurface_label_set
    __swig_getmethods__["label"] = _domino_nurbs.NurbsSurface_label_get
    if _newclass:
        label = _swig_property(_domino_nurbs.NurbsSurface_label_get, _domino_nurbs.NurbsSurface_label_set)
    __swig_setmethods__["id"] = _domino_nurbs.NurbsSurface_id_set
    __swig_getmethods__["id"] = _domino_nurbs.NurbsSurface_id_get
    if _newclass:
        id = _swig_property(_domino_nurbs.NurbsSurface_id_get, _domino_nurbs.NurbsSurface_id_set)
    __swig_setmethods__["degree_u"] = _domino_nurbs.NurbsSurface_degree_u_set
    __swig_getmethods__["degree_u"] = _domino_nurbs.NurbsSurface_degree_u_get
    if _newclass:
        degree_u = _swig_property(_domino_nurbs.NurbsSurface_degree_u_get, _domino_nurbs.NurbsSurface_degree_u_set)
    __swig_setmethods__["degree_v"] = _domino_nurbs.NurbsSurface_degree_v_set
    __swig_getmethods__["degree_v"] = _domino_nurbs.NurbsSurface_degree_v_get
    if _newclass:
        degree_v = _swig_property(_domino_nurbs.NurbsSurface_degree_v_get, _domino_nurbs.NurbsSurface_degree_v_set)
    __swig_setmethods__["cp_length_u"] = _domino_nurbs.NurbsSurface_cp_length_u_set
    __swig_getmethods__["cp_length_u"] = _domino_nurbs.NurbsSurface_cp_length_u_get
    if _newclass:
        cp_length_u = _swig_property(_domino_nurbs.NurbsSurface_cp_length_u_get, _domino_nurbs.NurbsSurface_cp_length_u_set)
    __swig_setmethods__["cp_length_v"] = _domino_nurbs.NurbsSurface_cp_length_v_set
    __swig_getmethods__["cp_length_v"] = _domino_nurbs.NurbsSurface_cp_length_v_get
    if _newclass:
        cp_length_v = _swig_property(_domino_nurbs.NurbsSurface_cp_length_v_get, _domino_nurbs.NurbsSurface_cp_length_v_set)
    __swig_setmethods__["knot_length_u"] = _domino_nurbs.NurbsSurface_knot_length_u_set
    __swig_getmethods__["knot_length_u"] = _domino_nurbs.NurbsSurface_knot_length_u_get
    if _newclass:
        knot_length_u = _swig_property(_domino_nurbs.NurbsSurface_knot_length_u_get, _domino_nurbs.NurbsSurface_knot_length_u_set)
    __swig_setmethods__["knot_length_v"] = _domino_nurbs.NurbsSurface_knot_length_v_set
    __swig_getmethods__["knot_length_v"] = _domino_nurbs.NurbsSurface_knot_length_v_get
    if _newclass:
        knot_length_v = _swig_property(_domino_nurbs.NurbsSurface_knot_length_v_get, _domino_nurbs.NurbsSurface_knot_length_v_set)
    __swig_setmethods__["knot_stream"] = _domino_nurbs.NurbsSurface_knot_stream_set
    __swig_getmethods__["knot_stream"] = _domino_nurbs.NurbsSurface_knot_stream_get
    if _newclass:
        knot_stream = _swig_property(_domino_nurbs.NurbsSurface_knot_stream_get, _domino_nurbs.NurbsSurface_knot_stream_set)
    __swig_setmethods__["cp_stream"] = _domino_nurbs.NurbsSurface_cp_stream_set
    __swig_getmethods__["cp_stream"] = _domino_nurbs.NurbsSurface_cp_stream_get
    if _newclass:
        cp_stream = _swig_property(_domino_nurbs.NurbsSurface_cp_stream_get, _domino_nurbs.NurbsSurface_cp_stream_set)
    __swig_setmethods__["knot_u"] = _domino_nurbs.NurbsSurface_knot_u_set
    __swig_getmethods__["knot_u"] = _domino_nurbs.NurbsSurface_knot_u_get
    if _newclass:
        knot_u = _swig_property(_domino_nurbs.NurbsSurface_knot_u_get, _domino_nurbs.NurbsSurface_knot_u_set)
    __swig_setmethods__["knot_v"] = _domino_nurbs.NurbsSurface_knot_v_set
    __swig_getmethods__["knot_v"] = _domino_nurbs.NurbsSurface_knot_v_get
    if _newclass:
        knot_v = _swig_property(_domino_nurbs.NurbsSurface_knot_v_get, _domino_nurbs.NurbsSurface_knot_v_set)
    __swig_setmethods__["cp"] = _domino_nurbs.NurbsSurface_cp_set
    __swig_getmethods__["cp"] = _domino_nurbs.NurbsSurface_cp_get
    if _newclass:
        cp = _swig_property(_domino_nurbs.NurbsSurface_cp_get, _domino_nurbs.NurbsSurface_cp_set)
    __swig_setmethods__["basis_u"] = _domino_nurbs.NurbsSurface_basis_u_set
    __swig_getmethods__["basis_u"] = _domino_nurbs.NurbsSurface_basis_u_get
    if _newclass:
        basis_u = _swig_property(_domino_nurbs.NurbsSurface_basis_u_get, _domino_nurbs.NurbsSurface_basis_u_set)
    __swig_setmethods__["basis_v"] = _domino_nurbs.NurbsSurface_basis_v_set
    __swig_getmethods__["basis_v"] = _domino_nurbs.NurbsSurface_basis_v_get
    if _newclass:
        basis_v = _swig_property(_domino_nurbs.NurbsSurface_basis_v_get, _domino_nurbs.NurbsSurface_basis_v_set)
    __swig_setmethods__["d_basis_u"] = _domino_nurbs.NurbsSurface_d_basis_u_set
    __swig_getmethods__["d_basis_u"] = _domino_nurbs.NurbsSurface_d_basis_u_get
    if _newclass:
        d_basis_u = _swig_property(_domino_nurbs.NurbsSurface_d_basis_u_get, _domino_nurbs.NurbsSurface_d_basis_u_set)
    __swig_setmethods__["d_basis_v"] = _domino_nurbs.NurbsSurface_d_basis_v_set
    __swig_getmethods__["d_basis_v"] = _domino_nurbs.NurbsSurface_d_basis_v_get
    if _newclass:
        d_basis_v = _swig_property(_domino_nurbs.NurbsSurface_d_basis_v_get, _domino_nurbs.NurbsSurface_d_basis_v_set)
    __swig_setmethods__["next"] = _domino_nurbs.NurbsSurface_next_set
    __swig_getmethods__["next"] = _domino_nurbs.NurbsSurface_next_get
    if _newclass:
        next = _swig_property(_domino_nurbs.NurbsSurface_next_get, _domino_nurbs.NurbsSurface_next_set)

    def __getitem__(self, i):
        return _domino_nurbs.NurbsSurface___getitem__(self, i)

    def __init__(self):
        this = _domino_nurbs.new_NurbsSurface()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _domino_nurbs.delete_NurbsSurface
    __del__ = lambda self: None
NurbsSurface_swigregister = _domino_nurbs.NurbsSurface_swigregister
NurbsSurface_swigregister(NurbsSurface)

class NurbsControlBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NurbsControlBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NurbsControlBox, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _domino_nurbs.NurbsControlBox_id_set
    __swig_getmethods__["id"] = _domino_nurbs.NurbsControlBox_id_get
    if _newclass:
        id = _swig_property(_domino_nurbs.NurbsControlBox_id_get, _domino_nurbs.NurbsControlBox_id_set)
    __swig_setmethods__["cp_length_u"] = _domino_nurbs.NurbsControlBox_cp_length_u_set
    __swig_getmethods__["cp_length_u"] = _domino_nurbs.NurbsControlBox_cp_length_u_get
    if _newclass:
        cp_length_u = _swig_property(_domino_nurbs.NurbsControlBox_cp_length_u_get, _domino_nurbs.NurbsControlBox_cp_length_u_set)
    __swig_setmethods__["cp_length_v"] = _domino_nurbs.NurbsControlBox_cp_length_v_set
    __swig_getmethods__["cp_length_v"] = _domino_nurbs.NurbsControlBox_cp_length_v_get
    if _newclass:
        cp_length_v = _swig_property(_domino_nurbs.NurbsControlBox_cp_length_v_get, _domino_nurbs.NurbsControlBox_cp_length_v_set)
    __swig_setmethods__["cp_length_w"] = _domino_nurbs.NurbsControlBox_cp_length_w_set
    __swig_getmethods__["cp_length_w"] = _domino_nurbs.NurbsControlBox_cp_length_w_get
    if _newclass:
        cp_length_w = _swig_property(_domino_nurbs.NurbsControlBox_cp_length_w_get, _domino_nurbs.NurbsControlBox_cp_length_w_set)
    __swig_setmethods__["order_u"] = _domino_nurbs.NurbsControlBox_order_u_set
    __swig_getmethods__["order_u"] = _domino_nurbs.NurbsControlBox_order_u_get
    if _newclass:
        order_u = _swig_property(_domino_nurbs.NurbsControlBox_order_u_get, _domino_nurbs.NurbsControlBox_order_u_set)
    __swig_setmethods__["order_v"] = _domino_nurbs.NurbsControlBox_order_v_set
    __swig_getmethods__["order_v"] = _domino_nurbs.NurbsControlBox_order_v_get
    if _newclass:
        order_v = _swig_property(_domino_nurbs.NurbsControlBox_order_v_get, _domino_nurbs.NurbsControlBox_order_v_set)
    __swig_setmethods__["order_w"] = _domino_nurbs.NurbsControlBox_order_w_set
    __swig_getmethods__["order_w"] = _domino_nurbs.NurbsControlBox_order_w_get
    if _newclass:
        order_w = _swig_property(_domino_nurbs.NurbsControlBox_order_w_get, _domino_nurbs.NurbsControlBox_order_w_set)
    __swig_setmethods__["cp_stream"] = _domino_nurbs.NurbsControlBox_cp_stream_set
    __swig_getmethods__["cp_stream"] = _domino_nurbs.NurbsControlBox_cp_stream_get
    if _newclass:
        cp_stream = _swig_property(_domino_nurbs.NurbsControlBox_cp_stream_get, _domino_nurbs.NurbsControlBox_cp_stream_set)
    __swig_setmethods__["cp"] = _domino_nurbs.NurbsControlBox_cp_set
    __swig_getmethods__["cp"] = _domino_nurbs.NurbsControlBox_cp_get
    if _newclass:
        cp = _swig_property(_domino_nurbs.NurbsControlBox_cp_get, _domino_nurbs.NurbsControlBox_cp_set)
    __swig_setmethods__["label"] = _domino_nurbs.NurbsControlBox_label_set
    __swig_getmethods__["label"] = _domino_nurbs.NurbsControlBox_label_get
    if _newclass:
        label = _swig_property(_domino_nurbs.NurbsControlBox_label_get, _domino_nurbs.NurbsControlBox_label_set)
    __swig_setmethods__["basis_equation"] = _domino_nurbs.NurbsControlBox_basis_equation_set
    __swig_getmethods__["basis_equation"] = _domino_nurbs.NurbsControlBox_basis_equation_get
    if _newclass:
        basis_equation = _swig_property(_domino_nurbs.NurbsControlBox_basis_equation_get, _domino_nurbs.NurbsControlBox_basis_equation_set)
    __swig_setmethods__["next"] = _domino_nurbs.NurbsControlBox_next_set
    __swig_getmethods__["next"] = _domino_nurbs.NurbsControlBox_next_get
    if _newclass:
        next = _swig_property(_domino_nurbs.NurbsControlBox_next_get, _domino_nurbs.NurbsControlBox_next_set)

    def __getitem__(self, i):
        return _domino_nurbs.NurbsControlBox___getitem__(self, i)

    def __init__(self):
        this = _domino_nurbs.new_NurbsControlBox()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _domino_nurbs.delete_NurbsControlBox
    __del__ = lambda self: None
NurbsControlBox_swigregister = _domino_nurbs.NurbsControlBox_swigregister
NurbsControlBox_swigregister(NurbsControlBox)


def nurbs_curve_init(curve):
    return _domino_nurbs.nurbs_curve_init(curve)
nurbs_curve_init = _domino_nurbs.nurbs_curve_init

def nurbs_curve_alloc(curve, num_control_points, degree):
    return _domino_nurbs.nurbs_curve_alloc(curve, num_control_points, degree)
nurbs_curve_alloc = _domino_nurbs.nurbs_curve_alloc

def nurbs_curve_create(curve, num_control_points, degree):
    return _domino_nurbs.nurbs_curve_create(curve, num_control_points, degree)
nurbs_curve_create = _domino_nurbs.nurbs_curve_create

def nurbs_curve_dispose(nurbs):
    return _domino_nurbs.nurbs_curve_dispose(nurbs)
nurbs_curve_dispose = _domino_nurbs.nurbs_curve_dispose

def nurbs_curve_free(p_curve_array, length):
    return _domino_nurbs.nurbs_curve_free(p_curve_array, length)
nurbs_curve_free = _domino_nurbs.nurbs_curve_free

def nurbs_curve_copy(dest, orig):
    return _domino_nurbs.nurbs_curve_copy(dest, orig)
nurbs_curve_copy = _domino_nurbs.nurbs_curve_copy

def nurbs_curve_get_point(nurbs, t):
    return _domino_nurbs.nurbs_curve_get_point(nurbs, t)
nurbs_curve_get_point = _domino_nurbs.nurbs_curve_get_point
class NurbsIntersection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NurbsIntersection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NurbsIntersection, name)
    __repr__ = _swig_repr
    __swig_setmethods__["u"] = _domino_nurbs.NurbsIntersection_u_set
    __swig_getmethods__["u"] = _domino_nurbs.NurbsIntersection_u_get
    if _newclass:
        u = _swig_property(_domino_nurbs.NurbsIntersection_u_get, _domino_nurbs.NurbsIntersection_u_set)
    __swig_setmethods__["v"] = _domino_nurbs.NurbsIntersection_v_set
    __swig_getmethods__["v"] = _domino_nurbs.NurbsIntersection_v_get
    if _newclass:
        v = _swig_property(_domino_nurbs.NurbsIntersection_v_get, _domino_nurbs.NurbsIntersection_v_set)
    __swig_setmethods__["m"] = _domino_nurbs.NurbsIntersection_m_set
    __swig_getmethods__["m"] = _domino_nurbs.NurbsIntersection_m_get
    if _newclass:
        m = _swig_property(_domino_nurbs.NurbsIntersection_m_get, _domino_nurbs.NurbsIntersection_m_set)
    __swig_setmethods__["n"] = _domino_nurbs.NurbsIntersection_n_set
    __swig_getmethods__["n"] = _domino_nurbs.NurbsIntersection_n_get
    if _newclass:
        n = _swig_property(_domino_nurbs.NurbsIntersection_n_get, _domino_nurbs.NurbsIntersection_n_set)

    def __init__(self):
        this = _domino_nurbs.new_NurbsIntersection()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _domino_nurbs.delete_NurbsIntersection
    __del__ = lambda self: None
NurbsIntersection_swigregister = _domino_nurbs.NurbsIntersection_swigregister
NurbsIntersection_swigregister(NurbsIntersection)


def nurbs_surface_init(surface):
    return _domino_nurbs.nurbs_surface_init(surface)
nurbs_surface_init = _domino_nurbs.nurbs_surface_init

def nurbs_surface_alloc(surface, num_cp_u, num_cp_v, degree_u, degree_v):
    return _domino_nurbs.nurbs_surface_alloc(surface, num_cp_u, num_cp_v, degree_u, degree_v)
nurbs_surface_alloc = _domino_nurbs.nurbs_surface_alloc

def nurbs_surface_create(surface, num_cp_u, num_cp_v, degree_u, degree_v):
    return _domino_nurbs.nurbs_surface_create(surface, num_cp_u, num_cp_v, degree_u, degree_v)
nurbs_surface_create = _domino_nurbs.nurbs_surface_create

def nurbs_surface_dispose(nurbs):
    return _domino_nurbs.nurbs_surface_dispose(nurbs)
nurbs_surface_dispose = _domino_nurbs.nurbs_surface_dispose

def nurbs_surface_free(p_nurbs_array, length):
    return _domino_nurbs.nurbs_surface_free(p_nurbs_array, length)
nurbs_surface_free = _domino_nurbs.nurbs_surface_free

def nurbs_surface_copy(dest, orig):
    return _domino_nurbs.nurbs_surface_copy(dest, orig)
nurbs_surface_copy = _domino_nurbs.nurbs_surface_copy

def nurbs_surface_get_point(nurbs, u, v):
    return _domino_nurbs.nurbs_surface_get_point(nurbs, u, v)
nurbs_surface_get_point = _domino_nurbs.nurbs_surface_get_point

def nurbs_surface_inversion_min_distance(surface_orig, surface_order2, point, epsilon, gamma):
    return _domino_nurbs.nurbs_surface_inversion_min_distance(surface_orig, surface_order2, point, epsilon, gamma)
nurbs_surface_inversion_min_distance = _domino_nurbs.nurbs_surface_inversion_min_distance

def nurbs_surface_get_normal(nurbs, u, v):
    return _domino_nurbs.nurbs_surface_get_normal(nurbs, u, v)
nurbs_surface_get_normal = _domino_nurbs.nurbs_surface_get_normal

def nurbs_surface_reduce_order2(nurbs2, surface):
    return _domino_nurbs.nurbs_surface_reduce_order2(nurbs2, surface)
nurbs_surface_reduce_order2 = _domino_nurbs.nurbs_surface_reduce_order2

def nurbs_controlbox_init(ffd):
    return _domino_nurbs.nurbs_controlbox_init(ffd)
nurbs_controlbox_init = _domino_nurbs.nurbs_controlbox_init

def nurbs_controlbox_alloc(cb, num_cp_u, num_cp_v, num_cp_w):
    return _domino_nurbs.nurbs_controlbox_alloc(cb, num_cp_u, num_cp_v, num_cp_w)
nurbs_controlbox_alloc = _domino_nurbs.nurbs_controlbox_alloc

def nurbs_controlbox_create(cb, num_cp_u, num_cp_v, num_cp_w):
    return _domino_nurbs.nurbs_controlbox_create(cb, num_cp_u, num_cp_v, num_cp_w)
nurbs_controlbox_create = _domino_nurbs.nurbs_controlbox_create

def nurbs_controlbox_dispose(ffd):
    return _domino_nurbs.nurbs_controlbox_dispose(ffd)
nurbs_controlbox_dispose = _domino_nurbs.nurbs_controlbox_dispose

def nurbs_controlbox_free(p_ffd, len):
    return _domino_nurbs.nurbs_controlbox_free(p_ffd, len)
nurbs_controlbox_free = _domino_nurbs.nurbs_controlbox_free

def nurbs_controlbox_get_point(cb, u, v, w):
    return _domino_nurbs.nurbs_controlbox_get_point(cb, u, v, w)
nurbs_controlbox_get_point = _domino_nurbs.nurbs_controlbox_get_point

def nurbs_controlbox_copy(dest, orig):
    return _domino_nurbs.nurbs_controlbox_copy(dest, orig)
nurbs_controlbox_copy = _domino_nurbs.nurbs_controlbox_copy

def nurbs_controlbox_inversion(cb, x, y, z, epsilon):
    return _domino_nurbs.nurbs_controlbox_inversion(cb, x, y, z, epsilon)
nurbs_controlbox_inversion = _domino_nurbs.nurbs_controlbox_inversion

def nurbs_surface_import_iges(filename):
    return _domino_nurbs.nurbs_surface_import_iges(filename)
nurbs_surface_import_iges = _domino_nurbs.nurbs_surface_import_iges

def nurbs_curve_import_ascii(filename):
    return _domino_nurbs.nurbs_curve_import_ascii(filename)
nurbs_curve_import_ascii = _domino_nurbs.nurbs_curve_import_ascii

def nurbs_surface_import_ascii(filename):
    return _domino_nurbs.nurbs_surface_import_ascii(filename)
nurbs_surface_import_ascii = _domino_nurbs.nurbs_surface_import_ascii

def nurbs_controlbox_import_ascii(filename):
    return _domino_nurbs.nurbs_controlbox_import_ascii(filename)
nurbs_controlbox_import_ascii = _domino_nurbs.nurbs_controlbox_import_ascii

def nurbs_export_ascii(filename, curve_array, num_curves, surface_array, num_surfaces, cb_array, num_cb):
    return _domino_nurbs.nurbs_export_ascii(filename, curve_array, num_curves, surface_array, num_surfaces, cb_array, num_cb)
nurbs_export_ascii = _domino_nurbs.nurbs_export_ascii

def nurbs_curve_export_ascii(filename, curve_array, num_curves):
    return _domino_nurbs.nurbs_curve_export_ascii(filename, curve_array, num_curves)
nurbs_curve_export_ascii = _domino_nurbs.nurbs_curve_export_ascii

def nurbs_surface_export_ascii(filename, surface_array, num_surfaces):
    return _domino_nurbs.nurbs_surface_export_ascii(filename, surface_array, num_surfaces)
nurbs_surface_export_ascii = _domino_nurbs.nurbs_surface_export_ascii

def nurbs_controlbox_export_ascii(filename, cb_array, num_cb):
    return _domino_nurbs.nurbs_controlbox_export_ascii(filename, cb_array, num_cb)
nurbs_controlbox_export_ascii = _domino_nurbs.nurbs_controlbox_export_ascii

def NurbsVector4_free(stream):
    return _domino_nurbs.NurbsVector4_free(stream)
NurbsVector4_free = _domino_nurbs.NurbsVector4_free

def NurbsVector3_free(stream):
    return _domino_nurbs.NurbsVector3_free(stream)
NurbsVector3_free = _domino_nurbs.NurbsVector3_free

def NurbsVector3_getItem(stream, index):
    return _domino_nurbs.NurbsVector3_getItem(stream, index)
NurbsVector3_getItem = _domino_nurbs.NurbsVector3_getItem

def NurbsVector4_getItem(stream, index):
    return _domino_nurbs.NurbsVector4_getItem(stream, index)
NurbsVector4_getItem = _domino_nurbs.NurbsVector4_getItem

def NurbsCurve_getItem(stream, index):
    return _domino_nurbs.NurbsCurve_getItem(stream, index)
NurbsCurve_getItem = _domino_nurbs.NurbsCurve_getItem

def NurbsSurface_getItem(stream, index):
    return _domino_nurbs.NurbsSurface_getItem(stream, index)
NurbsSurface_getItem = _domino_nurbs.NurbsSurface_getItem

def NurbsControlBox_getItem(stream, index):
    return _domino_nurbs.NurbsControlBox_getItem(stream, index)
NurbsControlBox_getItem = _domino_nurbs.NurbsControlBox_getItem

def nurbs_surface_getControlPoint(nurbs, iu, iv):
    return _domino_nurbs.nurbs_surface_getControlPoint(nurbs, iu, iv)
nurbs_surface_getControlPoint = _domino_nurbs.nurbs_surface_getControlPoint

def nurbs_control_box_getControlPoint(cb, iu, iv, iw):
    return _domino_nurbs.nurbs_control_box_getControlPoint(cb, iu, iv, iw)
nurbs_control_box_getControlPoint = _domino_nurbs.nurbs_control_box_getControlPoint

def nurbs_basis_get_parameter_interval(knot_vector, knot_length, degree):
    return _domino_nurbs.nurbs_basis_get_parameter_interval(knot_vector, knot_length, degree)
nurbs_basis_get_parameter_interval = _domino_nurbs.nurbs_basis_get_parameter_interval
# This file is compatible with both classic and new-style classes.


