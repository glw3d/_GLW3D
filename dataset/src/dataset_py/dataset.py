# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dataset', [dirname(__file__)])
        except ImportError:
            import _dataset
            return _dataset
        if fp is not None:
            try:
                _mod = imp.load_module('_dataset', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dataset = swig_import_helper()
    del swig_import_helper
else:
    import _dataset
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class owVector3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, owVector3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, owVector3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _dataset.owVector3d_x_set
    __swig_getmethods__["x"] = _dataset.owVector3d_x_get
    if _newclass:
        x = _swig_property(_dataset.owVector3d_x_get, _dataset.owVector3d_x_set)
    __swig_setmethods__["y"] = _dataset.owVector3d_y_set
    __swig_getmethods__["y"] = _dataset.owVector3d_y_get
    if _newclass:
        y = _swig_property(_dataset.owVector3d_y_get, _dataset.owVector3d_y_set)
    __swig_setmethods__["z"] = _dataset.owVector3d_z_set
    __swig_getmethods__["z"] = _dataset.owVector3d_z_get
    if _newclass:
        z = _swig_property(_dataset.owVector3d_z_get, _dataset.owVector3d_z_set)

    def __init__(self):
        this = _dataset.new_owVector3d()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _dataset.delete_owVector3d
    __del__ = lambda self: None
owVector3d_swigregister = _dataset.owVector3d_swigregister
owVector3d_swigregister(owVector3d)

class owIntStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, owIntStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, owIntStream, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stream"] = _dataset.owIntStream_stream_set
    __swig_getmethods__["stream"] = _dataset.owIntStream_stream_get
    if _newclass:
        stream = _swig_property(_dataset.owIntStream_stream_get, _dataset.owIntStream_stream_set)
    __swig_setmethods__["length"] = _dataset.owIntStream_length_set
    __swig_getmethods__["length"] = _dataset.owIntStream_length_get
    if _newclass:
        length = _swig_property(_dataset.owIntStream_length_get, _dataset.owIntStream_length_set)

    def __getitem__(self, i):
        return _dataset.owIntStream___getitem__(self, i)

    def __setitem__(self, i, value):
        return _dataset.owIntStream___setitem__(self, i, value)

    def __init__(self):
        this = _dataset.new_owIntStream()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _dataset.delete_owIntStream
    __del__ = lambda self: None
owIntStream_swigregister = _dataset.owIntStream_swigregister
owIntStream_swigregister(owIntStream)

class owDoubleStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, owDoubleStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, owDoubleStream, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stream"] = _dataset.owDoubleStream_stream_set
    __swig_getmethods__["stream"] = _dataset.owDoubleStream_stream_get
    if _newclass:
        stream = _swig_property(_dataset.owDoubleStream_stream_get, _dataset.owDoubleStream_stream_set)
    __swig_setmethods__["length"] = _dataset.owDoubleStream_length_set
    __swig_getmethods__["length"] = _dataset.owDoubleStream_length_get
    if _newclass:
        length = _swig_property(_dataset.owDoubleStream_length_get, _dataset.owDoubleStream_length_set)

    def __getitem__(self, i):
        return _dataset.owDoubleStream___getitem__(self, i)

    def __setitem__(self, i, value):
        return _dataset.owDoubleStream___setitem__(self, i, value)

    def __init__(self):
        this = _dataset.new_owDoubleStream()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _dataset.delete_owDoubleStream
    __del__ = lambda self: None
owDoubleStream_swigregister = _dataset.owDoubleStream_swigregister
owDoubleStream_swigregister(owDoubleStream)

class owVector3dStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, owVector3dStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, owVector3dStream, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stream"] = _dataset.owVector3dStream_stream_set
    __swig_getmethods__["stream"] = _dataset.owVector3dStream_stream_get
    if _newclass:
        stream = _swig_property(_dataset.owVector3dStream_stream_get, _dataset.owVector3dStream_stream_set)
    __swig_setmethods__["length"] = _dataset.owVector3dStream_length_set
    __swig_getmethods__["length"] = _dataset.owVector3dStream_length_get
    if _newclass:
        length = _swig_property(_dataset.owVector3dStream_length_get, _dataset.owVector3dStream_length_set)

    def __getitem__(self, i):
        return _dataset.owVector3dStream___getitem__(self, i)

    def __setitem__(self, i, value):
        return _dataset.owVector3dStream___setitem__(self, i, value)

    def __init__(self):
        this = _dataset.new_owVector3dStream()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _dataset.delete_owVector3dStream
    __del__ = lambda self: None
owVector3dStream_swigregister = _dataset.owVector3dStream_swigregister
owVector3dStream_swigregister(owVector3dStream)


def owDoubleStream_create(len):
    return _dataset.owDoubleStream_create(len)
owDoubleStream_create = _dataset.owDoubleStream_create

def owDoubleStream_free(a):
    return _dataset.owDoubleStream_free(a)
owDoubleStream_free = _dataset.owDoubleStream_free

def owIntStream_create(len):
    return _dataset.owIntStream_create(len)
owIntStream_create = _dataset.owIntStream_create

def owIntStream_free(a):
    return _dataset.owIntStream_free(a)
owIntStream_free = _dataset.owIntStream_free

def owVector3dStream_create(len):
    return _dataset.owVector3dStream_create(len)
owVector3dStream_create = _dataset.owVector3dStream_create

def owVector3dStream_free(a):
    return _dataset.owVector3dStream_free(a)
owVector3dStream_free = _dataset.owVector3dStream_free
class owTauGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, owTauGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, owTauGrid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["label"] = _dataset.owTauGrid_label_set
    __swig_getmethods__["label"] = _dataset.owTauGrid_label_get
    if _newclass:
        label = _swig_property(_dataset.owTauGrid_label_get, _dataset.owTauGrid_label_set)
    __swig_setmethods__["points"] = _dataset.owTauGrid_points_set
    __swig_getmethods__["points"] = _dataset.owTauGrid_points_get
    if _newclass:
        points = _swig_property(_dataset.owTauGrid_points_get, _dataset.owTauGrid_points_set)
    __swig_setmethods__["surface_tri3"] = _dataset.owTauGrid_surface_tri3_set
    __swig_getmethods__["surface_tri3"] = _dataset.owTauGrid_surface_tri3_get
    if _newclass:
        surface_tri3 = _swig_property(_dataset.owTauGrid_surface_tri3_get, _dataset.owTauGrid_surface_tri3_set)
    __swig_setmethods__["surface_quad4"] = _dataset.owTauGrid_surface_quad4_set
    __swig_getmethods__["surface_quad4"] = _dataset.owTauGrid_surface_quad4_get
    if _newclass:
        surface_quad4 = _swig_property(_dataset.owTauGrid_surface_quad4_get, _dataset.owTauGrid_surface_quad4_set)
    __swig_setmethods__["tetrahedrons4"] = _dataset.owTauGrid_tetrahedrons4_set
    __swig_getmethods__["tetrahedrons4"] = _dataset.owTauGrid_tetrahedrons4_get
    if _newclass:
        tetrahedrons4 = _swig_property(_dataset.owTauGrid_tetrahedrons4_get, _dataset.owTauGrid_tetrahedrons4_set)
    __swig_setmethods__["pyramids5"] = _dataset.owTauGrid_pyramids5_set
    __swig_getmethods__["pyramids5"] = _dataset.owTauGrid_pyramids5_get
    if _newclass:
        pyramids5 = _swig_property(_dataset.owTauGrid_pyramids5_get, _dataset.owTauGrid_pyramids5_set)
    __swig_setmethods__["prisms6"] = _dataset.owTauGrid_prisms6_set
    __swig_getmethods__["prisms6"] = _dataset.owTauGrid_prisms6_get
    if _newclass:
        prisms6 = _swig_property(_dataset.owTauGrid_prisms6_get, _dataset.owTauGrid_prisms6_set)
    __swig_setmethods__["hexaheders8"] = _dataset.owTauGrid_hexaheders8_set
    __swig_getmethods__["hexaheders8"] = _dataset.owTauGrid_hexaheders8_get
    if _newclass:
        hexaheders8 = _swig_property(_dataset.owTauGrid_hexaheders8_get, _dataset.owTauGrid_hexaheders8_set)
    __swig_setmethods__["marker_triangles"] = _dataset.owTauGrid_marker_triangles_set
    __swig_getmethods__["marker_triangles"] = _dataset.owTauGrid_marker_triangles_get
    if _newclass:
        marker_triangles = _swig_property(_dataset.owTauGrid_marker_triangles_get, _dataset.owTauGrid_marker_triangles_set)
    __swig_setmethods__["marker_quads"] = _dataset.owTauGrid_marker_quads_set
    __swig_getmethods__["marker_quads"] = _dataset.owTauGrid_marker_quads_get
    if _newclass:
        marker_quads = _swig_property(_dataset.owTauGrid_marker_quads_get, _dataset.owTauGrid_marker_quads_set)

    def __init__(self):
        this = _dataset.new_owTauGrid()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _dataset.delete_owTauGrid
    __del__ = lambda self: None
owTauGrid_swigregister = _dataset.owTauGrid_swigregister
owTauGrid_swigregister(owTauGrid)


def owTauGrid_create():
    return _dataset.owTauGrid_create()
owTauGrid_create = _dataset.owTauGrid_create

def owTauGrid_free(obj):
    return _dataset.owTauGrid_free(obj)
owTauGrid_free = _dataset.owTauGrid_free

_dataset.ADP_FILL_INT_swigconstant(_dataset)
ADP_FILL_INT = _dataset.ADP_FILL_INT
class ncDataSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ncDataSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ncDataSet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_vars"] = _dataset.ncDataSet_num_vars_set
    __swig_getmethods__["num_vars"] = _dataset.ncDataSet_num_vars_get
    if _newclass:
        num_vars = _swig_property(_dataset.ncDataSet_num_vars_get, _dataset.ncDataSet_num_vars_set)
    __swig_setmethods__["num_atts"] = _dataset.ncDataSet_num_atts_set
    __swig_getmethods__["num_atts"] = _dataset.ncDataSet_num_atts_get
    if _newclass:
        num_atts = _swig_property(_dataset.ncDataSet_num_atts_get, _dataset.ncDataSet_num_atts_set)
    __swig_setmethods__["var_names"] = _dataset.ncDataSet_var_names_set
    __swig_getmethods__["var_names"] = _dataset.ncDataSet_var_names_get
    if _newclass:
        var_names = _swig_property(_dataset.ncDataSet_var_names_get, _dataset.ncDataSet_var_names_set)
    __swig_setmethods__["att_names"] = _dataset.ncDataSet_att_names_set
    __swig_getmethods__["att_names"] = _dataset.ncDataSet_att_names_get
    if _newclass:
        att_names = _swig_property(_dataset.ncDataSet_att_names_get, _dataset.ncDataSet_att_names_set)

    def __init__(self):
        this = _dataset.new_ncDataSet()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _dataset.delete_ncDataSet
    __del__ = lambda self: None
ncDataSet_swigregister = _dataset.ncDataSet_swigregister
ncDataSet_swigregister(ncDataSet)


def owTauGrid_import(filename):
    return _dataset.owTauGrid_import(filename)
owTauGrid_import = _dataset.owTauGrid_import

def owTauSurfGrid_import(filename):
    return _dataset.owTauSurfGrid_import(filename)
owTauSurfGrid_import = _dataset.owTauSurfGrid_import

def nc_getatt(filename, att_name):
    return _dataset.nc_getatt(filename, att_name)
nc_getatt = _dataset.nc_getatt

def nc_query(filename):
    return _dataset.nc_query(filename)
nc_query = _dataset.nc_query

def nc_inquiry_var(filename, var_name):
    return _dataset.nc_inquiry_var(filename, var_name)
nc_inquiry_var = _dataset.nc_inquiry_var

def ncDataSet_free(dataset):
    return _dataset.ncDataSet_free(dataset)
ncDataSet_free = _dataset.ncDataSet_free

def nc_import_dbl(filename, var_name):
    return _dataset.nc_import_dbl(filename, var_name)
nc_import_dbl = _dataset.nc_import_dbl

def nc_import_int(filename, var_name):
    return _dataset.nc_import_int(filename, var_name)
nc_import_int = _dataset.nc_import_int

def nc_export_dbl(filename, var_name, stream, length):
    return _dataset.nc_export_dbl(filename, var_name, stream, length)
nc_export_dbl = _dataset.nc_export_dbl

def owTauGrid_surf_normals(grid):
    return _dataset.owTauGrid_surf_normals(grid)
owTauGrid_surf_normals = _dataset.owTauGrid_surf_normals

_dataset.owGridType_CGNS_UNKOWN_swigconstant(_dataset)
owGridType_CGNS_UNKOWN = _dataset.owGridType_CGNS_UNKOWN

_dataset.owGridType_CGNS_STRUCT_swigconstant(_dataset)
owGridType_CGNS_STRUCT = _dataset.owGridType_CGNS_STRUCT

_dataset.owGridType_CGNS_UNSTRUCT_swigconstant(_dataset)
owGridType_CGNS_UNSTRUCT = _dataset.owGridType_CGNS_UNSTRUCT
class cgnsSection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cgnsSection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cgnsSection, name)
    __repr__ = _swig_repr
    __swig_setmethods__["label"] = _dataset.cgnsSection_label_set
    __swig_getmethods__["label"] = _dataset.cgnsSection_label_get
    if _newclass:
        label = _swig_property(_dataset.cgnsSection_label_get, _dataset.cgnsSection_label_set)
    __swig_setmethods__["num_lines"] = _dataset.cgnsSection_num_lines_set
    __swig_getmethods__["num_lines"] = _dataset.cgnsSection_num_lines_get
    if _newclass:
        num_lines = _swig_property(_dataset.cgnsSection_num_lines_get, _dataset.cgnsSection_num_lines_set)
    __swig_setmethods__["num_triangles"] = _dataset.cgnsSection_num_triangles_set
    __swig_getmethods__["num_triangles"] = _dataset.cgnsSection_num_triangles_get
    if _newclass:
        num_triangles = _swig_property(_dataset.cgnsSection_num_triangles_get, _dataset.cgnsSection_num_triangles_set)
    __swig_setmethods__["num_quads"] = _dataset.cgnsSection_num_quads_set
    __swig_getmethods__["num_quads"] = _dataset.cgnsSection_num_quads_get
    if _newclass:
        num_quads = _swig_property(_dataset.cgnsSection_num_quads_get, _dataset.cgnsSection_num_quads_set)
    __swig_setmethods__["num_tetrahedrons"] = _dataset.cgnsSection_num_tetrahedrons_set
    __swig_getmethods__["num_tetrahedrons"] = _dataset.cgnsSection_num_tetrahedrons_get
    if _newclass:
        num_tetrahedrons = _swig_property(_dataset.cgnsSection_num_tetrahedrons_get, _dataset.cgnsSection_num_tetrahedrons_set)
    __swig_setmethods__["num_pyramids"] = _dataset.cgnsSection_num_pyramids_set
    __swig_getmethods__["num_pyramids"] = _dataset.cgnsSection_num_pyramids_get
    if _newclass:
        num_pyramids = _swig_property(_dataset.cgnsSection_num_pyramids_get, _dataset.cgnsSection_num_pyramids_set)
    __swig_setmethods__["num_pentahedrons"] = _dataset.cgnsSection_num_pentahedrons_set
    __swig_getmethods__["num_pentahedrons"] = _dataset.cgnsSection_num_pentahedrons_get
    if _newclass:
        num_pentahedrons = _swig_property(_dataset.cgnsSection_num_pentahedrons_get, _dataset.cgnsSection_num_pentahedrons_set)
    __swig_setmethods__["num_hexahedrons"] = _dataset.cgnsSection_num_hexahedrons_set
    __swig_getmethods__["num_hexahedrons"] = _dataset.cgnsSection_num_hexahedrons_get
    if _newclass:
        num_hexahedrons = _swig_property(_dataset.cgnsSection_num_hexahedrons_get, _dataset.cgnsSection_num_hexahedrons_set)
    __swig_setmethods__["bar2_stream"] = _dataset.cgnsSection_bar2_stream_set
    __swig_getmethods__["bar2_stream"] = _dataset.cgnsSection_bar2_stream_get
    if _newclass:
        bar2_stream = _swig_property(_dataset.cgnsSection_bar2_stream_get, _dataset.cgnsSection_bar2_stream_set)
    __swig_setmethods__["tri3_stream"] = _dataset.cgnsSection_tri3_stream_set
    __swig_getmethods__["tri3_stream"] = _dataset.cgnsSection_tri3_stream_get
    if _newclass:
        tri3_stream = _swig_property(_dataset.cgnsSection_tri3_stream_get, _dataset.cgnsSection_tri3_stream_set)
    __swig_setmethods__["quad4_stream"] = _dataset.cgnsSection_quad4_stream_set
    __swig_getmethods__["quad4_stream"] = _dataset.cgnsSection_quad4_stream_get
    if _newclass:
        quad4_stream = _swig_property(_dataset.cgnsSection_quad4_stream_get, _dataset.cgnsSection_quad4_stream_set)
    __swig_setmethods__["tetra4_stream"] = _dataset.cgnsSection_tetra4_stream_set
    __swig_getmethods__["tetra4_stream"] = _dataset.cgnsSection_tetra4_stream_get
    if _newclass:
        tetra4_stream = _swig_property(_dataset.cgnsSection_tetra4_stream_get, _dataset.cgnsSection_tetra4_stream_set)
    __swig_setmethods__["pyra5_stream"] = _dataset.cgnsSection_pyra5_stream_set
    __swig_getmethods__["pyra5_stream"] = _dataset.cgnsSection_pyra5_stream_get
    if _newclass:
        pyra5_stream = _swig_property(_dataset.cgnsSection_pyra5_stream_get, _dataset.cgnsSection_pyra5_stream_set)
    __swig_setmethods__["penta6_stream"] = _dataset.cgnsSection_penta6_stream_set
    __swig_getmethods__["penta6_stream"] = _dataset.cgnsSection_penta6_stream_get
    if _newclass:
        penta6_stream = _swig_property(_dataset.cgnsSection_penta6_stream_get, _dataset.cgnsSection_penta6_stream_set)
    __swig_setmethods__["hexa8_stream"] = _dataset.cgnsSection_hexa8_stream_set
    __swig_getmethods__["hexa8_stream"] = _dataset.cgnsSection_hexa8_stream_get
    if _newclass:
        hexa8_stream = _swig_property(_dataset.cgnsSection_hexa8_stream_get, _dataset.cgnsSection_hexa8_stream_set)
    __swig_setmethods__["next"] = _dataset.cgnsSection_next_set
    __swig_getmethods__["next"] = _dataset.cgnsSection_next_get
    if _newclass:
        next = _swig_property(_dataset.cgnsSection_next_get, _dataset.cgnsSection_next_set)

    def __getitem__(self, i):
        return _dataset.cgnsSection___getitem__(self, i)

    def __init__(self):
        this = _dataset.new_cgnsSection()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _dataset.delete_cgnsSection
    __del__ = lambda self: None
cgnsSection_swigregister = _dataset.cgnsSection_swigregister
cgnsSection_swigregister(cgnsSection)

class cgnsGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cgnsGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cgnsGrid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["label"] = _dataset.cgnsGrid_label_set
    __swig_getmethods__["label"] = _dataset.cgnsGrid_label_get
    if _newclass:
        label = _swig_property(_dataset.cgnsGrid_label_get, _dataset.cgnsGrid_label_set)
    __swig_setmethods__["id"] = _dataset.cgnsGrid_id_set
    __swig_getmethods__["id"] = _dataset.cgnsGrid_id_get
    if _newclass:
        id = _swig_property(_dataset.cgnsGrid_id_get, _dataset.cgnsGrid_id_set)
    __swig_setmethods__["base"] = _dataset.cgnsGrid_base_set
    __swig_getmethods__["base"] = _dataset.cgnsGrid_base_get
    if _newclass:
        base = _swig_property(_dataset.cgnsGrid_base_get, _dataset.cgnsGrid_base_set)
    __swig_setmethods__["zone"] = _dataset.cgnsGrid_zone_set
    __swig_getmethods__["zone"] = _dataset.cgnsGrid_zone_get
    if _newclass:
        zone = _swig_property(_dataset.cgnsGrid_zone_get, _dataset.cgnsGrid_zone_set)
    __swig_setmethods__["type"] = _dataset.cgnsGrid_type_set
    __swig_getmethods__["type"] = _dataset.cgnsGrid_type_get
    if _newclass:
        type = _swig_property(_dataset.cgnsGrid_type_get, _dataset.cgnsGrid_type_set)
    __swig_setmethods__["i_size"] = _dataset.cgnsGrid_i_size_set
    __swig_getmethods__["i_size"] = _dataset.cgnsGrid_i_size_get
    if _newclass:
        i_size = _swig_property(_dataset.cgnsGrid_i_size_get, _dataset.cgnsGrid_i_size_set)
    __swig_setmethods__["j_size"] = _dataset.cgnsGrid_j_size_set
    __swig_getmethods__["j_size"] = _dataset.cgnsGrid_j_size_get
    if _newclass:
        j_size = _swig_property(_dataset.cgnsGrid_j_size_get, _dataset.cgnsGrid_j_size_set)
    __swig_setmethods__["k_size"] = _dataset.cgnsGrid_k_size_set
    __swig_getmethods__["k_size"] = _dataset.cgnsGrid_k_size_get
    if _newclass:
        k_size = _swig_property(_dataset.cgnsGrid_k_size_get, _dataset.cgnsGrid_k_size_set)
    __swig_setmethods__["dim"] = _dataset.cgnsGrid_dim_set
    __swig_getmethods__["dim"] = _dataset.cgnsGrid_dim_get
    if _newclass:
        dim = _swig_property(_dataset.cgnsGrid_dim_get, _dataset.cgnsGrid_dim_set)
    __swig_setmethods__["num_points"] = _dataset.cgnsGrid_num_points_set
    __swig_getmethods__["num_points"] = _dataset.cgnsGrid_num_points_get
    if _newclass:
        num_points = _swig_property(_dataset.cgnsGrid_num_points_get, _dataset.cgnsGrid_num_points_set)
    __swig_setmethods__["point_x"] = _dataset.cgnsGrid_point_x_set
    __swig_getmethods__["point_x"] = _dataset.cgnsGrid_point_x_get
    if _newclass:
        point_x = _swig_property(_dataset.cgnsGrid_point_x_get, _dataset.cgnsGrid_point_x_set)
    __swig_setmethods__["point_y"] = _dataset.cgnsGrid_point_y_set
    __swig_getmethods__["point_y"] = _dataset.cgnsGrid_point_y_get
    if _newclass:
        point_y = _swig_property(_dataset.cgnsGrid_point_y_get, _dataset.cgnsGrid_point_y_set)
    __swig_setmethods__["point_z"] = _dataset.cgnsGrid_point_z_set
    __swig_getmethods__["point_z"] = _dataset.cgnsGrid_point_z_get
    if _newclass:
        point_z = _swig_property(_dataset.cgnsGrid_point_z_get, _dataset.cgnsGrid_point_z_set)
    __swig_setmethods__["section"] = _dataset.cgnsGrid_section_set
    __swig_getmethods__["section"] = _dataset.cgnsGrid_section_get
    if _newclass:
        section = _swig_property(_dataset.cgnsGrid_section_get, _dataset.cgnsGrid_section_set)
    __swig_setmethods__["num_sections"] = _dataset.cgnsGrid_num_sections_set
    __swig_getmethods__["num_sections"] = _dataset.cgnsGrid_num_sections_get
    if _newclass:
        num_sections = _swig_property(_dataset.cgnsGrid_num_sections_get, _dataset.cgnsGrid_num_sections_set)
    __swig_setmethods__["next"] = _dataset.cgnsGrid_next_set
    __swig_getmethods__["next"] = _dataset.cgnsGrid_next_get
    if _newclass:
        next = _swig_property(_dataset.cgnsGrid_next_get, _dataset.cgnsGrid_next_set)

    def __getitem__(self, i):
        return _dataset.cgnsGrid___getitem__(self, i)

    def __init__(self):
        this = _dataset.new_cgnsGrid()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _dataset.delete_cgnsGrid
    __del__ = lambda self: None
cgnsGrid_swigregister = _dataset.cgnsGrid_swigregister
cgnsGrid_swigregister(cgnsGrid)


def cgnsGrid_free(grid, num_grids):
    return _dataset.cgnsGrid_free(grid, num_grids)
cgnsGrid_free = _dataset.cgnsGrid_free

def cgnsGrid_import(filename):
    return _dataset.cgnsGrid_import(filename)
cgnsGrid_import = _dataset.cgnsGrid_import
# This file is compatible with both classic and new-style classes.


